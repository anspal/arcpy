# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Name : Anshu Pallav
# Class : MSGISci Cohort 4
# Subject : GISC 605 GIS Programming
#	
# AddElevation.py
# Created on: 2017-05-13 05:15:36.00000
# Generated by ArcGIS/ModelBuilder and modified for common use.

# Usage: AddElevationToFeature <dem_tif> <dsm_tif> <Match_Option> <campus_structures_shp> <dsm_tif__3_> <OutputShapefile> <Output__2_> 
# Description: This script finds the mean elevation values from a DSM raster and adds it as an attribute into the corresponding building roofprint shapefile. 
# This script was required while working on a project of creating 3D visualization of California State University Long Beach campus. The script can modified to be used with DEM data als well. 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, arcinfo
import shutil

# Print the current license information
print "ArcGIS license level : " + arcpy.ProductInfo( )

# Check if appropriate license is available   
if arcpy.CheckProduct("arcinfo") == "Available" or arcpy.CheckProduct("arceditor") == "Available":
    if arcpy.CheckExtension("Spatial") == "Available":	                        # Check if spatial analyst extention is enabled. 
        print "Spatial Analyst extension " + arcpy.CheckExtension("Spatial")
        arcpy.CheckOutExtension("Spatial")	                                		# Enable the spatial analyst license.
        print "Spatial Analyst extension enabled!"                                 #Print message
    else:
        print "Spatial Analyst license is unavailable. Cannot run this script." 	#Print error message
        quit()
else:   
    print "ArcMap running with ArcBasic license. Spatial Analysis is not supported at this license level. Kindly upgrade the license to ArcEditor(Standard) or ArcInfo(Advanced)."
    quit()

# Setting up the option to overwite geoprocessing outputs if the files already exists.
arcpy.env.overwriteOutput = True

# Process: Create Workspace folder
arcpy.CreateFolder_management("C:", "WS")
print "Script workspace folder created under drive 'C:/WS'"

# Script arguments
Script_Workspace = "C:\\WS" # provide a default value if unspecified
dsm_tif = "C:\\WS\\IP\\dsm.tif"
campus_structures_shp = "C:\\WS\\IP\\campus_structures.shp"
Feature_Elevation_shp = "C:\\WS\\OP\\Feature_Elevation.shp"

# Setting up workspace
arcpy.env.workspace = Script_Workspace

#Create required output folder
arcpy.CreateFolder_management(Script_Workspace, "OP")
print "Script output folder created!"

print "The script requires all the required data to be in the script input folder."
#Copy files from user directory into script input directory.
src = raw_input("Enter the folder path where data is located: ")
dst = Script_Workspace + "\IP"
shutil.copytree(src, dst) #copying files from input folder to output folder resursivly.
print "Input files copied to the Script_Inputs folder"

# Local variables:
Mask_Raster = "C:\\WS\\OP\\Mask_Raster"
Field = "VALUE"
Raster_points_shp = "C:\\WS\\OP\\Raster_points.shp"
Script_Outputs = "C:\\WS\\OP"

# Process: Extract by Mask
print "Extracting..."
arcpy.gp.ExtractByMask_sa(dsm_tif, campus_structures_shp, Mask_Raster)
print "Extraction complete!""\n"

# Process: Raster to Point
print "Converting raster to point...""\n" 
arcpy.RasterToPoint_conversion(Mask_Raster, Raster_points_shp, Field)
print "Conversion Complete!""\n" 

# Process: Spatial Join
print "Joining elevation values...""\n" 
arcpy.SpatialJoin_analysis(campus_structures_shp, Raster_points_shp, Feature_Elevation_shp, "JOIN_ONE_TO_ONE", "KEEP_ALL", "objectid \"objectid\" true true false 10 Long 0 10 ,First,#,C:\\WS\\IP\\campus_structures.shp,objectid,-1,-1;gen_type \"gen_type\" true true false 50 Text 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,gen_type,-1,-1;sub_type \"sub_type\" true true false 50 Text 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,sub_type,-1,-1;name \"name\" true true false 80 Text 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,name,-1,-1;short_name \"short_name\" true true false 10 Text 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,short_name,-1,-1;year_built \"year_built\" true true false 5 Long 0 5 ,First,#,C:\\WS\\IP\\campus_structures.shp,year_built,-1,-1;year_remdl \"year_remdl\" true true false 5 Long 0 5 ,First,#,C:\\WS\\IP\\campus_structures.shp,year_remdl,-1,-1;photo \"photo\" true true false 250 Text 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,photo,-1,-1;notes \"notes\" true true false 250 Text 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,notes,-1,-1;st_area_sh \"st_area_sh\" true true false 19 Double 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,st_area_sh,-1,-1;st_length_ \"st_length_\" true true false 19 Double 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,st_length_,-1,-1;st_area__1 \"st_area__1\" true true false 19 Double 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,st_area__1,-1,-1;st_length1 \"st_length1\" true true false 19 Double 0 0 ,First,#,C:\\WS\\IP\\campus_structures.shp,st_length1,-1,-1;stories \"stories\" true true false 1 Short 0 1 ,First,#,C:\\WS\\IP\\campus_structures.shp,stories,-1,-1;apprx_ht \"apprx_ht\" true true false 6 Float 1 5 ,First,#,C:\\WS\\IP\\campus_structures.shp,apprx_ht,-1,-1;pointid \"pointid\" true true false 10 Long 0 10 ,First,#,C:\\WS\\OP\\Raster_points.shp,pointid,-1,-1;grid_code \"grid_code\" true true false 10 Long 0 10 ,Median,#,C:\\WS\\OP\\Raster_points.shp,grid_code,-1,-1", "INTERSECT", "", "")
print "Join complete!""\n" 

# Process: Feature Class To Shapefile (multiple)
print "Converting feature class to shapefile..""\n" 
arcpy.FeatureClassToShapefile_conversion("C:\\WS\\OP\\Feature_Elevation.shp", Script_Outputs)
print "Conversion done !""\n" 

print "Script successfully complete"
	
#print "Error executing the script! Check the data, code and try again."
arcpy.CheckInExtension("Spatial")
